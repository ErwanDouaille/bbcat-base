# Common settings for library generation

# Set library name
if(MSVC)
	# ONLY static library with MSVC
	set(_static_lib_name ${PROJECT_NAME})
else()
	# static and shared libraries
	set(_lib_name ${PROJECT_NAME})
	set(_static_lib_name ${PROJECT_NAME}-static)
endif()

# set static library sources
add_library(${_static_lib_name} STATIC
			${_sources})
set_target_properties(${_static_lib_name} PROPERTIES OUTPUT_NAME ${_static_lib_name}-${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})

if(NOT MSVC)
	# set shared library sources
	add_library(${_lib_name} SHARED
				${_sources})
	set_target_properties(${_lib_name} PROPERTIES OUTPUT_NAME ${_lib_name}-${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})
endif()

# link extra libraries (both global and local)
target_link_libraries(${_static_lib_name} 
					  ${GLOBAL_EXTRA_LIBS}
					  ${_extra_libs})

if(NOT MSVC)
	# link extra libraries (both global and local)
	target_link_libraries(${_lib_name} 
						  ${GLOBAL_EXTRA_LIBS}
						  ${_extra_libs})
endif()

set_target_properties(${_static_lib_name} PROPERTIES 
	PUBLIC_HEADER "${_headers}"
)

# create config files for package
export(TARGETS ${_lib_name} ${_static_lib_name}
	FILE "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake")

export(PACKAGE ${PROJECT_NAME})
 
file(RELATIVE_PATH REL_INCLUDE_DIR "${INSTALL_CMAKE_DIR}"
   "${INSTALL_INCLUDE_DIR}")

configure_file(${BBCAT_COMMON_DIR}/Config.cmake.in
			   ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake @ONLY)

configure_file(${BBCAT_COMMON_DIR}/Config.cmake.in
			   ${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}Config.cmake @ONLY)

configure_file(${BBCAT_COMMON_DIR}/ConfigVersion.cmake.in
			   ${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake @ONLY)

# copy headers into build location
file(COPY ${_headers}
	DESTINATION ${CMAKE_BINARY_DIR}/include/${PROJECT_NAME})

# installation settings
install(FILES
		"${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}Config.cmake"
		"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
		DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev)

install(TARGETS ${_static_lib_name}
		EXPORT ${PROJECT_NAME}Targets
		LIBRARY DESTINATION ${INSTALL_LIB_DIR}
		ARCHIVE DESTINATION ${INSTALL_LIB_DIR}
		RUNTIME DESTINATION ${INSTALL_BIN_DIR}
		PUBLIC_HEADER DESTINATION ${INSTALL_INCLUDE_DIR}/${PROJECT_NAME})

if(NOT MSVC)
	install(TARGETS ${_lib_name} 
			EXPORT ${PROJECT_NAME}Targets
			LIBRARY DESTINATION ${INSTALL_LIB_DIR}
			ARCHIVE DESTINATION ${INSTALL_LIB_DIR}
			RUNTIME DESTINATION ${INSTALL_BIN_DIR}
			PUBLIC_HEADER DESTINATION ${INSTALL_INCLUDE_DIR}/${PROJECT_NAME} COMPONENT dev)
endif()

# handle header files in sub directories
foreach(header ${_subheaders})
    STRING(REGEX MATCH "(.*)/" DIR ${header})
	#message("Dir for '${header}' is '${DIR}'")
    INSTALL(FILES ${header} DESTINATION ${INSTALL_INCLUDE_DIR}/${PROJECT_NAME}/${DIR})
endforeach()

if(MSVC)
	# install .pdb file for debug versions
	install(FILES
			${PROJECT_BINARY_DIR}/src/Debug/${PROJECT_NAME}.pdb
			DESTINATION ${INSTALL_LIB_DIR}
			CONFIGURATIONS Debug)
endif(MSVC)

install(EXPORT ${PROJECT_NAME}Targets
		DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev)
